# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Replicated log

on:
  push:
    branches: 
      - 'main'

permissions:
  contents: read

jobs:
  tests:
    
    name: Tests
    runs-on: ubuntu-latest

    steps:
    - 
      name: Checkout repository
      uses: actions/checkout@v4

    - 
      name: Set up Python 3.12.3
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.3"

    - 
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - 
      name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
     
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        flake8 tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - 
      name: Test with pytest
      run: |
        python -m pytest

  build:
    name: Build
    needs: tests
    runs-on: ubuntu-latest

    steps:
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    -
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ vars.DOCKERHUB_USERNAME }}/cicd-gke:${{ github.sha }}, ${{ vars.DOCKERHUB_USERNAME }}/cicd-gke:latest

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_REGION: ${{ vars.GKE_REGION }}
      GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v4

      - 
        name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
      - # Alternative option - authentication via credentials json
        name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - 
        name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

#     - name: Get the GKE credentials so we can deploy to the cluster
#       run: |
#         gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION"

#     - name: Create namespace & set in Kustomize
#       run: |
#          namespacePresentBlue=`kubectl get ns | grep python-app-blue | wc -l`
#          namespacePresentGreen=`kubectl get ns | grep python-app-green | wc -l`
#          if [ $namespacePresentBlue -eq 0 ]
#          then
#             kubectl create ns python-app-blue
#             cd k8s
#             kustomize edit set namespace python-app-blue
#             echo "NEW_NAMESPACE=python-app-blue" >> $GITHUB_ENV
#             echo "OLD_NAMESPACE=python-app-green" >> $GITHUB_ENV
#          elif [ $namespacePresentGreen -eq 0 ]
#          then
#             kubectl create ns python-app-green
#             cd k8s
#             kustomize edit set namespace python-app-green
#             echo "NEW_NAMESPACE=python-app-green" >> $GITHUB_ENV
#             echo "OLD_NAMESPACE=python-app-blue" >> $GITHUB_ENV
#          else
#             echo "Both Blue and Green namespaces are present! Exiting"
#             exit 1
#          fi

#     - name: Update Kubernetes resources
#       env:
#         DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#       run: |
#        cd k8s
#        kustomize edit set image hello-gitops=$DOCKER_USERNAME/hello-gitops:$GITHUB_SHA
#        cat kustomization.yaml
    
#     - name: Deploy updated Kubernetes resources
#       run: |
#         kubectl apply -k k8s/ 
   
#     # DO SOME CHECKS HERE BEFORE COMMIT
#     #- name: Deploy updated Kubernetes resources
#     #  run: |
#     #    kubectl apply -k k8s/

#     # REMOVE OLD DEPLOYMENT!!
#     - name: Remove old namespace
#       run: |
#         namespacePresentOld=`kubectl get ns | grep ${{ env.OLD_NAMESPACE }} | wc -l`
#         if [ $namespacePresentOld -eq 1 ]
#         then
#           kubectl delete ns ${{ env.OLD_NAMESPACE }} --wait=true
#         fi
 
#     - name: Commit files
#       run: |
#         git config --local user.email "action@github.com"
#         git config --local user.name "GitHub Action"
#         git commit -am "Bump docker tag"
        
#     - name: Push changes
#       uses: ad-m/github-push-action@master
#       with:
#         github_token: ${{ secrets.GITHUB_TOKEN }}       